// FORK OF SNOWPACK'S BABEL PLUGIN
// https://github.com/pikapkg/snowpack/blob/37ad4d5f193be1fe2e5ad3b3725520e79c97f2c6/assets/babel-plugin.js

/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/explicit-function-return-type */
const fs = require('fs');
const path = require('path');

function readImportMapFile(explicitPath, dir) {
    if (explicitPath) {
        if (path.isAbsolute(explicitPath)) {
            return fs.readFileSync(explicitPath, { encoding: 'utf8' });
        }
        const explicitImportMap = path.join(process.cwd(), dir, explicitPath);
        return fs.readFileSync(explicitImportMap, { encoding: 'utf8' });
    }
    const localImportMap = path.join(
        process.cwd(),
        dir,
        `import-map.local.json`
    );
    const defaultImportMap = path.join(process.cwd(), dir, `import-map.json`);
    try {
        return fs.readFileSync(localImportMap, { encoding: 'utf8' });
    } catch (err) {
        // do nothing
    }
    try {
        return fs.readFileSync(defaultImportMap, { encoding: 'utf8' });
    } catch (err) {
        // do nothing
    }
    throw new Error(`Import map not found. Run Snowpack first to generate one.
  ✘ ${localImportMap}
  ✘ ${defaultImportMap}`);
}

function getImportMap(explicitPath, dir) {
    const fileContents = readImportMapFile(explicitPath, dir);
    const importMapJson = JSON.parse(fileContents);
    return importMapJson;
}

function rewriteImport(
    importMap,
    imp,
    buildDir,
    webModulesDir,
    shouldAddMissingExtension
) {
    // Find js/svelte imports that are absolute and need the buildDir prepended
    const isAbsoluteSourceImport =
        imp.startsWith('/') && !imp.startsWith(`/${buildDir}`);
    const isSourceImport =
        imp.startsWith('/') || imp.startsWith('.') || imp.startsWith('\\');
    const isRemoteImport =
        imp.startsWith('http://') || imp.startsWith('https://');
    const mappedImport = importMap.imports[imp];
    if (mappedImport) {
        if (
            mappedImport.startsWith('http://') ||
            mappedImport.startsWith('https://')
        ) {
            return mappedImport;
        }
        return path.posix.join('/', webModulesDir, mappedImport);
    }
    if (isRemoteImport) {
        return imp;
    }
    if (!isSourceImport && !mappedImport) {
        console.log(
            `warn: bare import "${imp}" not found in import map, ignoring...`
        );
        return imp;
    }
    if (isAbsoluteSourceImport) {
        imp = `/${buildDir}${imp}`;
    }
    if (isSourceImport && shouldAddMissingExtension && !path.extname(imp)) {
        return `${imp}.js`;
    }
    return imp;
}

/**
 * BABEL OPTIONS:
 *   dir                - The web_modules installed location once hosted on the web.
 *                        Defaults to "web_modules", which translates package imports to "/web_modules/PACKAGE_NAME".
 *   importMap          - The name/location of the import-map.json file generated by Snowpack.
 *                        Relative to the dir path.
 *                        Defaults to "import-map.local.json", "import-map.json" in that order.
 *   optionalExtensions - Adds any missing JS extensions to local/relative imports. Support for these
 *                        partial imports is missing in the browser and being phased out of Node.js, but
 *                        this can be a useful option for migrating an old project to Snowpack.
 */
module.exports = function pikaWebBabelTransform({ types: t }) {
    // SVELVET snowpack options.
    // TODO: may need to make these overridable.
    const optionalExtensions = true;
    const buildDir = 'dist';
    const importMap = `../../public/${buildDir}/web_modules/import-map.json`;
    const webModulesDir = `${buildDir}/web_modules`;

    // Plugin code
    return {
        pre() {
            this.importMapJson = getImportMap(importMap, webModulesDir);
        },
        visitor: {
            CallExpression(path) {
                if (path.node.callee.type !== 'Import') {
                    return;
                }
                const [source] = path.get('arguments');
                if (source.type !== 'StringLiteral') {
                    /* Should never happen */
                    return;
                }
                source.replaceWith(
                    t.stringLiteral(
                        rewriteImport(
                            this.importMapJson,
                            source.node.value,
                            buildDir,
                            webModulesDir,
                            optionalExtensions
                        )
                    )
                );
            },
            'ImportDeclaration|ExportNamedDeclaration|ExportAllDeclaration'(
                path
            ) {
                const source = path.get('source');
                // An export without a 'from' clause
                if (!source.node) {
                    return;
                }
                source.replaceWith(
                    t.stringLiteral(
                        rewriteImport(
                            this.importMapJson,
                            source.node.value,
                            buildDir,
                            webModulesDir,
                            optionalExtensions
                        )
                    )
                );
            },
        },
    };
};
